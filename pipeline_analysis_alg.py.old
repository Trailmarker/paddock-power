import os
import inspect
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterVectorDestination,
                       QgsCoordinateReferenceSystem)
from PyQt5.QtGui import QIcon
import processing


class PipelineAnalysis(QgsProcessingAlgorithm):

    PIPE = 'PIPE'
    DEM = 'DEM'
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config=None):
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.DEM,
                self.tr('Elevation'))
            )
                
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.PIPE,
                self.tr('New Pipeline'),
                types=[QgsProcessing.TypeVectorLine],
                defaultValue=None)
            )
        
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT,
                self.tr('Pipeline Analysis'),
                type=QgsProcessing.TypeVectorLine,
                createByDefault=True,
                defaultValue=None)
            )

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(13, model_feedback)
        results = {}
        outputs = {}

        # Warp (reproject)
        alg_params = {
            'DATA_TYPE': 0,
            'EXTRA': '',
            'INPUT': parameters['DEM'],
            'MULTITHREADING': False,
            'NODATA': None,
            'OPTIONS': '',
            'RESAMPLING': 0,
            'SOURCE_CRS': None,
            'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:7845'),
            'TARGET_EXTENT': None,
            'TARGET_EXTENT_CRS': None,
            'TARGET_RESOLUTION': None,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['WarpReproject'] = processing.run('gdal:warpreproject', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # Reproject layer
        alg_params = {
            'INPUT': parameters['PIPE'],
            'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:7845'),
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ReprojectLayer'] = processing.run('native:reprojectlayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # Explode lines
        alg_params = {
            'INPUT': outputs['ReprojectLayer']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ExplodeLines'] = processing.run('native:explodelines', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(3)
        if feedback.isCanceled():
            return {}

        # Refactor fields
        alg_params = {
            'FIELDS_MAPPING': [{'expression': '$id', 'length': 0, 'name': 'ID', 'precision': 0, 'type': 2}, {'expression': ' angle_at_vertex( $geometry,0)', 'length': 10, 'name': 'Bearing', 'precision': 3, 'type': 6}, {'expression': 'x(start_point(  $geometry ))', 'length': 10, 'name': 'Start Coordinates Long', 'precision': 3, 'type': 6}, {'expression': 'y(start_point(  $geometry ))', 'length': 10, 'name': 'Start Coordinates Lat', 'precision': 3, 'type': 6}, {'expression': 'x(end_point(  $geometry ))', 'length': 10, 'name': 'End Coordinates Long', 'precision': 3, 'type': 6}, {'expression': 'y(end_point(  $geometry ))', 'length': 10, 'name': 'End Coordinates Y', 'precision': 3, 'type': 6}, {'expression': 'round($length,1)', 'length': 10, 'name': 'LengthM', 'precision': 2, 'type': 6}, {'expression': 'round($length / 1000,1)', 'length': 10, 'name': 'LengthKM', 'precision': 2, 'type': 6}],
            'INPUT': outputs['ExplodeLines']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['RefactorFields'] = processing.run('qgis:refactorfields', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(4)
        if feedback.isCanceled():
            return {}

        # Splitting Pipeline
        alg_params = {
            'INPUT': outputs['RefactorFields']['OUTPUT'],
            'INTERVAL': 30,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['SplittingPipeline'] = processing.run('native:densifygeometriesgivenaninterval', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(5)
        if feedback.isCanceled():
            return {}

        # Extract Elevation
        alg_params = {
            'BAND': 1,
            'INPUT': outputs['SplittingPipeline']['OUTPUT'],
            'NODATA': 0,
            'RASTER': outputs['WarpReproject']['OUTPUT'],
            'SCALE': 1,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ExtractElevation'] = processing.run('native:setzfromraster', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(6)
        if feedback.isCanceled():
            return {}

        # Explode lines
        alg_params = {
            'INPUT': outputs['ExtractElevation']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ExplodeLines'] = processing.run('native:explodelines', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(7)
        if feedback.isCanceled():
            return {}

        # Calculate 3d lines
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'Distance',
            'FIELD_PRECISION': 1,
            'FIELD_TYPE': 0,
            'FORMULA': 'sqrt((x( end_point($geometry )) - x(start_point($geometry )))^2 + (y( end_point($geometry )) - y(start_point($geometry )))^2 + (z( end_point($geometry )) - z(start_point($geometry )))^2)',
            'INPUT': outputs['ExplodeLines']['OUTPUT'],
            'NEW_FIELD': True,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['Calculate3dLines'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(8)
        if feedback.isCanceled():
            return {}

        # Calculate Minimum Elevation
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'MinElev',
            'FIELD_PRECISION': 1,
            'FIELD_TYPE': 1,
            'FORMULA': 'min(minimum(z(start_point($geometry)),ID),minimum(z(end_point($geometry)),ID))',
            'INPUT': outputs['Calculate3dLines']['OUTPUT'],
            'NEW_FIELD': True,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CalculateMinimumElevation'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(9)
        if feedback.isCanceled():
            return {}

        # Calculate Maximum Elevation
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'MaxElev',
            'FIELD_PRECISION': 1,
            'FIELD_TYPE': 1,
            'FORMULA': 'max(maximum(z(start_point($geometry)),ID),maximum(z(end_point($geometry)),ID))',
            'INPUT': outputs['CalculateMinimumElevation']['OUTPUT'],
            'NEW_FIELD': True,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CalculateMaximumElevation'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(10)
        if feedback.isCanceled():
            return {}

        # Sum Distance
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'TotalDistanceM',
            'FIELD_PRECISION': 1,
            'FIELD_TYPE': 0,
            'FORMULA': 'sum( \"Distance\" , \"ID\" )',
            'INPUT': outputs['CalculateMaximumElevation']['OUTPUT'],
            'NEW_FIELD': True,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['SumDistance'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(11)
        if feedback.isCanceled():
            return {}

        # Joining Lines
        alg_params = {
            'FIELD': ['ID'],
            'INPUT': outputs['SumDistance']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['JoiningLines'] = processing.run('native:dissolve', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(12)
        if feedback.isCanceled():
            return {}

        # Refactor fields
        alg_params = {
            'FIELDS_MAPPING': [{'expression': 'ID', 'length': 0, 'name': 'ID', 'precision': 0, 'type': 2}, {'expression': '"Bearing"', 'length': 10, 'name': 'Bearing', 'precision': 3, 'type': 6}, {'expression': '"Start Coordinates Long"', 'length': 10, 'name': 'Start Coordinates Long', 'precision': 3, 'type': 6}, {'expression': '"Start Coordinates Lat"', 'length': 10, 'name': 'Start Coordinates Lat', 'precision': 3, 'type': 6}, {'expression': '"End Coordinates Long"', 'length': 10, 'name': 'End Coordinates Long', 'precision': 3, 'type': 6}, {'expression': '"End Coordinates Y"', 'length': 10, 'name': 'End Coordinates Y', 'precision': 3, 'type': 6}, {'expression': '"LengthM"', 'length': 10, 'name': 'LengthM', 'precision': 2, 'type': 6}, {'expression': '"LengthKM"', 'length': 10, 'name': 'LengthKM', 'precision': 2, 'type': 6}, {'expression': '"Distance"', 'length': 10, 'name': 'Distance', 'precision': 2, 'type': 6}, {'expression': '"TotalDistanceM"', 'length': 10, 'name': 'TotalDistanceM', 'precision': 2, 'type': 6}, {'expression': 'round(TotalDistanceM / 1000,1)', 'length': 10, 'name': 'TotalDistanceKM', 'precision': 2, 'type': 6}, {'expression': 'abs(round( "TotalDistanceM" -  "LengthM" ,1))', 'length': 10, 'name': 'DifferenceM', 'precision': 2, 'type': 6}, {'expression': 'MinElev', 'length': 0, 'name': 'MinElev', 'precision': 0, 'type': 6}, {'expression': 'MaxElev', 'length': 0, 'name': 'MaxElev', 'precision': 0, 'type': 6}],
            'INPUT': outputs['JoiningLines']['OUTPUT'],
            'OUTPUT': parameters['OUTPUT']
        }
        refactored_output = processing.run('qgis:refactorfields', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        #results['PipelineAnalysis'] = outputs['RefactorFields']['OUTPUT']
        #results = ['OUTPUT']
        return {'OUTPUT': refactored_output['OUTPUT']}

    def name(self):
        return 'Pipeline Analysis'

    def displayName(self):
        return self.tr('Pipeline Analysis')
        
    def icon(self):
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, 'icons/pipeline.png'))) # icon for the Paddock Power Tools Group in Toolbox
        return icon

    def group(self):
        return self.tr('Line Tools')

    def groupId(self):
        return 'Line Tools'

    def tr(self, string):
        """
        Returns a translatable string with the self.tr() function.
        """
        return QCoreApplication.translate('Processing', string)
        
    def createInstance(self):
        return PipelineAnalysis()
