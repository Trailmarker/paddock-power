# -*- coding: utf-8 -*-
from qgis.core import QgsFeatureRequest

from ..features.metric_paddock import MetricPaddock
from ..schemas.schemas import AREA, BUILD_FENCE, ESTIMATED_CAPACITY_PER_AREA, ESTIMATED_CAPACITY, FID, NAME, PADDOCK, PERIMETER, POTENTIAL_CAPACITY, POTENTIAL_CAPACITY_PER_AREA, STATUS
from .derived_feature_layer import DerivedFeatureLayer


class DerivedMetricPaddockLayer(DerivedFeatureLayer):

    STYLE = "paddock"

    QUERY = f"""
select
	"{{0}}".geometry as geometry,
	0 as "{FID}",
	"{{0}}".{FID} as {PADDOCK},
	"{{0}}".{NAME} as {NAME},
	"{{0}}".{STATUS} as {STATUS},
	"{{0}}"."{AREA}" as "{AREA}",
	"{{0}}"."{PERIMETER}" as "{PERIMETER}",
	"{{0}}"."{BUILD_FENCE}" as "{BUILD_FENCE}",
	(sum("{{1}}"."{ESTIMATED_CAPACITY}") / nullif("{{0}}"."{AREA}", 0.0)) as "{ESTIMATED_CAPACITY_PER_AREA}",
	sum("{{1}}"."{ESTIMATED_CAPACITY}") as "{ESTIMATED_CAPACITY}",
	(sum("{{1}}"."{POTENTIAL_CAPACITY}") / nullif("{{0}}"."{AREA}", 0.0)) as "{POTENTIAL_CAPACITY_PER_AREA}",
	sum("{{1}}"."{POTENTIAL_CAPACITY}") as "{POTENTIAL_CAPACITY}"
from "{{0}}"
left join "{{1}}"
	on "{{0}}".{FID} = "{{1}}".{PADDOCK}
group by "{{0}}".{FID}
"""

    def getFeatureType(self):
        """Return the type of feature that this layer contains. Override in subclasses"""
        return MetricPaddock

    def getFeatureByPaddockId(self, paddockId):
        """Return a MetricPaddock based on a Paddock FID."""
        paddockIdRequest = QgsFeatureRequest().setFilterExpression(f'"{PADDOCK}" = {paddockId}')
        return next(self.getFeatures(paddockIdRequest))

    def __init__(self, project, layerName, paddockLayer, paddockLandSystemsLayer):

        super().__init__(
            project,
            layerName,
            DerivedMetricPaddockLayer.QUERY,
            DerivedMetricPaddockLayer.STYLE,
            paddockLayer,
            paddockLandSystemsLayer)

    def wrapFeature(self, feature):
        # Burn in the FID that gets generated by QGIS for consistency
        feature.setAttribute(FID, feature.id())
        return MetricPaddock(self, feature)
