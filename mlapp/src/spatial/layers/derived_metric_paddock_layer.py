# -*- coding: utf-8 -*-
from qgis.core import QgsFeatureRequest

from ..features.metric_paddock import MetricPaddock
from ..fields.names import AREA, BUILD_FENCE, ESTIMATED_CAPACITY_PER_AREA, ESTIMATED_CAPACITY, FID, NAME, PADDOCK, PERIMETER, POTENTIAL_CAPACITY, POTENTIAL_CAPACITY_PER_AREA, STATUS, TIMEFRAME
from ..fields.timeframe import Timeframe
from .derived_feature_layer import DerivedFeatureLayer


class DerivedMetricPaddockLayer(DerivedFeatureLayer):

    STYLE = "paddock"

    def parameteriseQuery(self, PaddockLayer, PaddockLandSystemsLayer):
        return f"""
select
	"{PaddockLayer}".geometry as geometry,
	0 as {FID},
	"{PaddockLayer}".{FID} as {PADDOCK},
	"{PaddockLayer}".{NAME} as {NAME},
	"{PaddockLayer}".{STATUS} as {STATUS},
    "{PaddockLandSystemsLayer}".{TIMEFRAME} as {TIMEFRAME},
	"{PaddockLayer}"."{AREA}" as "{AREA}",
	"{PaddockLayer}"."{PERIMETER}" as "{PERIMETER}",
	"{PaddockLayer}"."{BUILD_FENCE}" as "{BUILD_FENCE}",
	(sum("{PaddockLandSystemsLayer}"."{ESTIMATED_CAPACITY}") / nullif("{PaddockLayer}"."{AREA}", 0.0)) as "{ESTIMATED_CAPACITY_PER_AREA}",
	sum("{PaddockLandSystemsLayer}"."{ESTIMATED_CAPACITY}") as "{ESTIMATED_CAPACITY}",
	(sum("{PaddockLandSystemsLayer}"."{POTENTIAL_CAPACITY}") / nullif("{PaddockLayer}"."{AREA}", 0.0)) as "{POTENTIAL_CAPACITY_PER_AREA}",
	sum("{PaddockLandSystemsLayer}"."{POTENTIAL_CAPACITY}") as "{POTENTIAL_CAPACITY}"
from "{PaddockLayer}"
left join "{PaddockLandSystemsLayer}"
	on "{PaddockLayer}".{FID} = "{PaddockLandSystemsLayer}".{PADDOCK}
group by "{PaddockLayer}".{FID}
"""

    def getFeatureType(self):
        """Return the type of feature that this layer contains. Override in subclasses"""
        return MetricPaddock

    def getFeatureByPaddockId(self, paddockId):
        """Return a MetricPaddock based on a Paddock FID."""
        paddockIdRequest = QgsFeatureRequest().setFilterExpression(f'"{PADDOCK}" = {paddockId}')
        features = [f for f in self.getFeatures(paddockIdRequest)]
        if not features:
            return None
        else:
            for f in features:
                if Timeframe[f.timeframe.name] == Timeframe[self.getPaddockPowerProject().currentTimeframe.name]:
                    return f 
       
    def __init__(self, project, layerName, paddockLayer, paddockLandSystemsLayer):

        super().__init__(
            project,
            layerName,
            self.parameteriseQuery(paddockLayer.name(), paddockLandSystemsLayer.name()),
            DerivedMetricPaddockLayer.STYLE,
            paddockLayer,
            paddockLandSystemsLayer)

    def wrapFeature(self, feature):
        # Burn in the FID that gets generated by QGIS for consistency
        feature.setAttribute(FID, feature.id())
        return MetricPaddock(self, feature)
